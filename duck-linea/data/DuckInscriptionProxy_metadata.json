{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_inscription",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_insIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pageIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					}
				],
				"name": "activity",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "num",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "time",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "op",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "max",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "lim",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amt",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "tick",
								"type": "string"
							}
						],
						"internalType": "struct DuckInscriptionProxy.Record[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "holders",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "holder",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "percentage",
								"type": "uint256"
							}
						],
						"internalType": "struct DuckInscriptionProxy.Holders[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "mintRecord",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "num",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "time",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "op",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "max",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "lim",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amt",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "tick",
								"type": "string"
							}
						],
						"internalType": "struct DuckInscriptionProxy.Record[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "recordString",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_inscription",
						"type": "address"
					}
				],
				"name": "setInscription",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pageIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					}
				],
				"name": "test",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"inscription/DuckInscriptionProxy.sol": "DuckInscriptionProxy"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v4.x/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v4.x/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
				"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v4.x/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v4.x/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v4.x/contracts/utils/Context.sol": {
			"keccak256": "0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439",
			"license": "MIT",
			"urls": [
				"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c",
				"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h"
			]
		},
		"inscription/DuckInscriptionInterface.sol": {
			"keccak256": "0xfa896ae37494bea8320122c060a73853a36f9f0b50ac377f7e68a27f794f3339",
			"license": "MIT",
			"urls": [
				"bzz-raw://aae066c8c7eda099d9f6157c47d75bc932491148269db9968f2dc3023fb5c327",
				"dweb:/ipfs/QmWXZN16qswdsvpTqRgFDYPuGbXuCDz5dSkf1ycA8Jpbvp"
			]
		},
		"inscription/DuckInscriptionProxy.sol": {
			"keccak256": "0x58ce25218211ec5c80a102c6304ef01b464d46bd9816be796e77e8eb4a97b3f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://10bc5074da11fc32e2faa90c370de1160874de860c5fbd74bacd9d36743d75d7",
				"dweb:/ipfs/QmT12kgagftPiM8D5i1DKp52y51cxWo7wz7ZQCviBBwPmv"
			]
		}
	},
	"version": 1
}